#include <GL/gl.h>
#include <stdio.h>
#include <math.h>
#include <GL/glut.h>

// Function declarations
void circle(GLfloat rx, GLfloat ry, GLfloat cx, GLfloat cy);
void init(void);
void hills(void);
void drawClouds(void);
void display(void);
void mouse(int button, int state, int x, int y);
void keyboard(unsigned char key, int x, int y);
void menu(int option);
void createMenu(void);

float bx = -500; // Initial position so the car starts from the far left end
int isMoving = 0; // Flag to control car movement

void circle(GLfloat rx, GLfloat ry, GLfloat cx, GLfloat cy)
{
    glBegin(GL_POLYGON);
    for (int i = 0; i <= 360; i++)
    {
        float angle = i * 3.1416 / 180;
        float x = rx * cos(angle);
        float y = ry * sin(angle);
        glVertex2f((x + cx), (y + cy));
    }
    glEnd();
}

void init(void)
{
    glClearColor(0.0, 0.0, 0.9, 0.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0.0, 500, 0.0, 500); // window size
}

void hills(void)
{
    // Hills 1
    glColor3ub(184, 134, 11);
    glBegin(GL_POLYGON);
    glVertex2d(-40, 300);
    glVertex2d(200, 300);
    glVertex2d(100, 450);
    glEnd();

    // Hills 2
    glColor3ub(218, 165, 32);
    glBegin(GL_POLYGON);
    glVertex2d(150, 300);
    glVertex2d(350, 300);
    glVertex2d(250, 450);
    glEnd();

    // Hills 3
    glColor3ub(184, 134, 11);
    glBegin(GL_POLYGON);
    glVertex2d(300, 300);
    glVertex2d(520, 300);
    glVertex2d(400, 450);
    glEnd();
}

void drawClouds(void)
{
    // Cloud 1
    glColor3ub(255, 255, 255);
    circle(20, 20, 100, 480);
    circle(20, 20, 130, 480);
    circle(20, 20, 115, 500);

    // Cloud 2
    circle(20, 20, 300, 460);
    circle(20, 20, 330, 460);
    circle(20, 20, 315, 480);
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);

    // Ground Color
    glColor3ub(0, 255, 0);
    glBegin(GL_POLYGON);
    glVertex2d(0, 0);
    glVertex2d(500, 0);
    glVertex2d(500, 150);
    glVertex2d(0, 150);
    glEnd();

    // Road
    glColor3ub(255, 255, 255);
    glBegin(GL_POLYGON);
    glVertex2d(0, 55);
    glVertex2d(500, 55);
    glVertex2d(500, 115);
    glVertex2d(0, 115);
    glEnd();

    glColor3ub(0, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2d(0, 60);
    glVertex2d(500, 60);
    glVertex2d(500, 110);
    glVertex2d(0, 110);
    glEnd();

    // Hills
    hills();

    // Sun
    glColor3ub(255, 215, 0);
    circle(20, 20, 175, 450);

    // Clouds above the hills
    drawClouds();

    // Moving Car
    glPushMatrix();
    glTranslatef(bx, 0, 0);

    // Car Body
    glColor3ub(255, 0, 0);
    glBegin(GL_POLYGON);
    glVertex2d(410, 100);
    glVertex2d(490, 100);
    glVertex2d(485, 130);
    glVertex2d(410, 130);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex2d(420, 130);
    glVertex2d(475, 130);
    glVertex2d(465, 160);
    glVertex2d(430, 160);
    glEnd();

    // Car Windows
    glColor3ub(220, 220, 220);
    glBegin(GL_POLYGON);
    glVertex2d(425, 130);
    glVertex2d(445, 130);
    glVertex2d(445, 150);
    glVertex2d(430, 150);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex2d(450, 130);
    glVertex2d(470, 130);
    glVertex2d(465, 150);
    glVertex2d(450, 150);
    glEnd();

    // Car Wheels
    glColor3ub(0, 0, 0);
    circle(10, 14, 435, 100);
    circle(10, 14, 465, 100);

    glColor3ub(245, 245, 245);
    circle(6, 10, 435, 100);
    circle(6, 10, 465, 100);

    glPopMatrix();

    if (isMoving) {
        bx += 0.05;
        if (bx > 500) bx = -500; // Reset to start position when off-screen
    }

if (bx >= 500) {
        glColor3ub(255, 255, 255); // White color for text
        glRasterPos2i(220, 250); // Position of the text
        const char* message = "Thank you";
        while (*message) {
            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *message);
            message++;
        }
    }





    glutPostRedisplay();

    glFlush();
    glutSwapBuffers();
}

void mouse(int button, int state, int x, int y)
{
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        isMoving = !isMoving; // Toggle car movement
    }
}

void keyboard(unsigned char key, int x, int y)
{
    switch (key)
    {
    case 27: // ESC key
        exit(0);
        break;
    case 'r':
        glClearColor(1.0, 0.0, 0.0, 0.0); // Red background
        break;
    case 'g':
        glClearColor(0.0, 1.0, 0.0, 0.0); // Green background
        break;
    case 'b':
        glClearColor(0.0, 0.0, 1.0, 0.0); // Blue background
        break;
    default:
        break;
    }
    glutPostRedisplay();
}

void menu(int option)
{
    switch (option)
    {
    case 1:
        glClearColor(1.0, 0.0, 0.0, 0.0); // Red background
        break;
    case 2:
        glClearColor(0.0, 1.0, 0.0, 0.0); // Green background
        break;
    case 3:
        glClearColor(0.0, 0.0, 1.0, 0.0); // Blue background
        break;
    case 4:
        exit(0);
        break;
    default:
        break;
    }
    glutPostRedisplay();
}

void createMenu()
{
    int submenu = glutCreateMenu(menu);
    glutAddMenuEntry("Red", 1);
    glutAddMenuEntry("Green", 2);
    glutAddMenuEntry("Blue", 3);

    glutCreateMenu(menu);
    glutAddSubMenu("Change Background Color", submenu);
    glutAddMenuEntry("Exit", 4);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB); // Double buffering
    glutInitWindowSize(1000, 600);
    glutInitWindowPosition(300, 50);
    glutCreateWindow("A Moving Car Scenario");
    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);
    createMenu();
    glutMainLoop();
    return 0;
}
